# Операції та оператори
# присвоювання - кортежне, одиночне як частинний випадок
x, y, w = 1, 2, "Hello"
s = "%d %d" % (y, x)
print(w, s)

if x < 100 :                         # умова, дужки не потрібні, кінець умови - ":"
    print("x")                       # формування блоків задається відступами
    print("greater than")            # інструкції з однаковим відступом вважаються
    print(100)                       # належними одному блокові
elif x > 20 and x > 40 :             # else-if, логічні оператори - мнемонічні (and, or, not, ...)
       print(">20")                  # Відступи в іншому блоці можуть бути іншими,
       print("and")                  # головне - однакові в межах одного блоку
       print(">40")                  #  
elif not x >= 0 :                    # elif може бути декількабї,через це немає оператора switch
    print("negative")                #              
else : print("other"); print("case") # за потреби блок можна не формувати,розділяючи оператори ";"
                                     # після блокових виразів прийнято лишати порожній рядок
y = 10 if x > 0 else 20              # ТЕРНАРНИЙ ВИРАЗ

# ЦИКЛИ
# У Python є небагато циклів — умовний (while) та ітеративний (for)
# Форма do-while не підтримується, тому часто використовують конструкцію з break
# Інкрементальні форми (++ або --) відсутні

# Приклад 1 — умовний цикл while
x = 5
while x > 0:
    print(x,end = " ")
    x -= 1
else :                      # Цей блок виконується,якщо циклова умова порушується
                            # Іншими словами цикл добігає кінця
    print("End")

print("\n--------------------------")
# Приклад 2 — імітація do-while через while True та break
x = 5
while True:                 #Логічні константи пишуться з великої літери 
    print(x,end = " ")
    x -= 1
    if x == 0:
        break
else :                      #Блок не виконується якщо цикл прервано break
    print("End")
#................................
#цикл-ітератор
for e in (1,2,"Hello"):
     print(e)
#генератори множин - range
r1 = range(10)     # Генератори дозволяють проходити множини крок-за-кроком,не створюючи всю множину
print(r1,type(r1)) # range(0,10) <class 'range'>

for i in r1 :
     print(i,end=" ")  # 0 1 2 3 4 5 6 7 8 9 - генерується від 0, до 10 виключно
print()

print(*r1)             # розпаковка - представлення множини як такої ,що йде через ","

print(*range(1,11,2))  # 1 - початок (включно) ,11 - кінець(виключно),2-крок

#оператор введення (дані з консолі)
x = input("Input x = ") #повідомлення перед введенням 
print(x,type(x)) # 8 <class 'str'> -введення не типізується,залишається str

#для перетворення типів використовуються їх конструктори
x = int(x)
print(x,type(x))

x = float(x)
print(x,type(x))


'''
Для складання довгих коментарів
використовують синтаксис
багаторядкових літералів


Д.З. Реалізувати введення користувачем двох чисел - границь діапазону
Забезпечити виведення усіх цілих чисел з заданого діапазону (включно з межами)
Наприклад:
Введіть межі 2, 7
2 3 4 5 6 7

Введіть межі  7, 3
7 6 5 4 3

Введіть межі  7, 7
7

* забезпечити також введення кроку
'''

#HW 
a = int(input("Введіть початок діапазону: "))
b = int(input("Введіть кінець діапазону: "))

step = int(input("Введіть крок: "))


if a <= b and step > 0:
    for i in range(a, b + 1, step):
        print(i, end=" ")
elif a >= b and step > 0:
    for i in range(a, b - 1, -step):
        print(i, end=" ")
elif a <= b and step < 0:
    for i in range(a, b + 1, step):
        print(i, end=" ")
elif a >= b and step < 0:
    for i in range(a, b - 1, step):
        print(i, end=" ")
else:
    print("Крок не може бути 0 !")
